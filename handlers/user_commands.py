from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile

import keyboards.keyboards
from analize.analize import Analize
from data.database import DataBase
from config.config import bd_path
from keyboards import keyboards
from utils import states
from aiogram.fsm.context import FSMContext
from utils.states import Bebra, ShowBebra, DellBebra, AnalizeBebra
from aiogram.filters.callback_data import CallbackData
bd = DataBase(bd_path)
router = Router()


@router.message(CommandStart())
async def start(message: Message):
    user = bd.get_user(message.from_user.id)
    if(not user):
        bd.add_user(message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n/spend - –≤–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É \n/analize - –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç\n/show-–ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—É",reply_markup=keyboards.main)
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state:FSMContext):
    await state.clear()
    await message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",reply_markup=keyboards.main)
@router.message(F.text == "üìä  –ê–Ω–∞–ª–∏–∑ –∑–∞—Ç—Ä–∞—Ç")
async def anal(message: Message, state:FSMContext):
    types_spend = bd.get_types(message.from_user.id)
    if (not types_spend):
        await state.set_state(Bebra.set_type)
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–≤–æ–¥–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=keyboards.cancel)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:")
        for index, a in enumerate(types_spend):
            await message.answer(f"{index + 1} - {a[1]}")
        await state.set_state(AnalizeBebra.choise)
@router.message(Command('analize'))
async def anal(message: Message,state: FSMContext):
    types_spend = bd.get_types(message.from_user.id)
    if (not types_spend):
        await state.set_state(Bebra.set_type)
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–≤–æ–¥–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=keyboards.cancel)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:")
        for index, a in enumerate(types_spend):
            await message.answer(f"{index + 1} - {a[1]}")
        await state.set_state(AnalizeBebra.choise)
@router.message(F.text == "üíµ  –í–≤–µ—Å—Ç–∏ –∑–∞—Ç—Ä–∞—Ç—ã")
async def anal(message: Message, state: FSMContext):
    types_spend = bd.get_types(message.from_user.id)
    if (not types_spend):
        await state.set_state(Bebra.set_type)
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–≤–æ–¥–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=keyboards.cancel)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboards.ik())
@router.message(Command('spend'))
async def anal(message: Message, state: FSMContext):
    types_spend = bd.get_types(message.from_user.id)
    if (not types_spend):
        await state.set_state(Bebra.set_type)
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–≤–æ–¥–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=keyboards.cancel)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboards.ik())
@router.message(F.text == "üëÅ  –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã")
async def showType(message: Message,state: FSMContext):
    user_types=bd.get_types(message.from_user.id,)
    if(user_types):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        for index, a in enumerate(user_types):
            await message.answer(f"{index+1} - {a[1]}")
        await state.set_state(ShowBebra.choise_type)
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–∞—Ç")
@router.message(Command("show"))
async def showType(message: Message,state: FSMContext):
    user_types=bd.get_types(message.from_user.id,)
    if(user_types):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        for index, a in enumerate(user_types):
            await message.answer(f"{index+1} - {a[1]}")
        await state.set_state(ShowBebra.choise_type)
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–∞—Ç")
@router.message(F.text == "‚ùå  –£–¥–∞–ª–∏—Ç—å")
async def showType(message: Message,state: FSMContext):
    types_spend = bd.get_types(message.from_user.id)
    if (not types_spend):
        await state.set_state(Bebra.set_type)
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º —É–¥–∞–ª—è—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=keyboards.cancel)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=keyboards.bebra())
@router.message(AnalizeBebra.choise)
async def choise_type(message: Message, state: FSMContext):
    types_spend = bd.get_types(message.from_user.id)
    type_id = -1
    for index, a in enumerate(types_spend):
        if index+1 == int(message.text):
            type_id = a[0]
    spending = bd.get_spend_type(type_id, message.from_user.id)
    if (spending):
        a = Analize(spending)
        a.analize(message.from_user.id)

        await message.answer(f"–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç:\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–∞—Ç–∞: {a.max_name} - {a.maxxx} —Ä—É–±–ª–µ–π\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Ç–∞: {a.min_name} - {a.min} —Ä—É–±–ª–µ–π\n\n–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç—ã: {round(a.avg,2)} —Ä—É–±–ª–µ–π\n\n –í—Å–µ–≥–æ —Ç—Ä–∞—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–æ: {a.all_spendes}")
        await message.answer("–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç:")
        await message.reply_photo(
            photo=FSInputFile(
                path=a.path
            )
        )
        a.delPhoto()

@router.message(ShowBebra.choise_type)
async def choise_type(message: Message, state: FSMContext):

    types_spend = bd.get_types(message.from_user.id)
    type_id = -1
    for index, a in enumerate(types_spend):
        if index == int(message.text) - 1:
            type_id = a[0]
    spending=bd.get_spend_type(type_id,message.from_user.id)
    if(spending):
        for index, a in enumerate(spending):
            await message.answer(str(a[2])+" - "+str(a[3])+" —Ä—É–±–ª–µ–π")
    else:
        await message.answer("–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç —Ç—Ä–∞—Ç")
        await state.set_state(ShowBebra.choise_type)
@router.message(Bebra.choise_type)
async def choise_type(message: Message, state: FSMContext):
    try:
        types_spend = bd.get_types(message.from_user.id)
        for index, a in enumerate(types_spend):
            if index+1 == float(message.text):
                await state.update_data(type=a[1])
                await state.set_state(Bebra.spend_name)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã.")
        if float(message.text) > index+1 or float(message.text)<=0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=keyboards.cancel)
            await state.set_state(Bebra.choise_type)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        await state.set_state(Bebra.choise_type)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã.")
@router.message(Bebra.set_type)
async def set_type(message: Message, state:FSMContext):
    await state.update_data(type=message.text)
    types = bd.get_type_id(message.text, message.from_user.id)
    if (not types):
        bd.add_type(message.text, message.from_user.id)
        await state.set_state(Bebra.spend_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã", reply_markup=keyboards.cancel)
    else:
        await message.answer("–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
@router.message(Bebra.spend_name)
async def set_name(message: Message, state:FSMContext):
    await state.update_data(spend_name=message.text)
    await state.set_state(Bebra.spend_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã",reply_markup=keyboards.cancel)
@router.message(Bebra.spend_price)
async def set_price(message: Message, state:FSMContext):
    try:
        price = float(message.text)
        if (price > 0):
            await state.update_data(spend_price=message.text)
            data = await state.get_data()
            await state.clear()
            type_user_id=bd.get_type_id(data["type"],message.from_user.id)
            bd.add_spend(data["spend_name"],data["spend_price"],message.from_user.id,type_user_id[0][0])
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª–∏ –∑–∞—Ç—Ä–∞—Ç—É {data['spend_name']} –Ω–∞ —Å—É–º–º—É {data['spend_price']} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {data['type']}", reply_markup=keyboards.main)
        else:
            await message.answer("–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –≤—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            await state.set_state(Bebra.spend_price)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã.", reply_markup=keyboards.cancel)
    except ValueError:
        await message.answer("C—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.set_state(Bebra.spend_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã.", reply_markup=keyboards.cancel)

@router.message(DellBebra.dell_type)
async def delType(message: Message):
    try:
        types_spend = bd.get_types(message.from_user.id)
        id_type = -1
        for index, a in enumerate(types_spend):
            if index == int(message.text)-1:
                id_type = a[0]
        if(id_type>=0):
            bd.del_type(id_type,message.from_user.id)
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞")
    except:
        await message.answer("–û—à–∏–±–∫–∞")
        await states.set_state(DellBebra.dell_type)



@router.message(DellBebra.dell_type)
async def delType(message: Message, state: FSMContext):
    try:
        types_spend = bd.get_types(message.from_user.id)
        id_type = -1
        for index, a in enumerate(types_spend):
            if index+1 == int(message.text):
                id_type = a[0]
        if id_type>=0:
            bd.del_type(id_type)
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    except:
        await message.answer("–û—à–∏–±–∫–∞")
        await state.set_state(DellBebra.dell_type)

@router.message(DellBebra.choise_spend)
async def delType(message: Message, state: FSMContext):
    try:
        types_spend = bd.get_types(message.from_user.id)
        id_type = -1
        for index, a in enumerate(types_spend):
            if index+1 == int(message.text):
                id_type = a[0]
        if id_type>=0:
            spendes = bd.get_spend_type(id_type, message.from_user.id)
            if(spendes):
                await state.set_state(DellBebra.dell_spend)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã")
                for index, a in enumerate(spendes):
                    await state.update_data(type=id_type)
                    await message.answer(f"{index + 1} - {a[2]}")
            else:
                await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–∞—Ç")
    except:
        await message.answer("–û—à–∏–±–∫–∞")
        await state.set_state(DellBebra.choise_spend)


@router.message(DellBebra.dell_spend)
async def delSpend(message: Message, state: FSMContext):
    try:
        data=await state.get_data()
        spendes = bd.get_spend_type(data['type'],message.from_user.id)
        id_type = -1
        for index, a in enumerate(spendes):
            if index + 1 == int(message.text):
                id_type = a[0]
        if id_type >= 0:
            bd.del_spend_choise(data['type'],id_type,message.from_user.id)
            await message.answer("–¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    except:
        await message.answer("–û—à–∏–±–∫–∞")
        await state.set_state(DellBebra.dell_spend)

@router.callback_query(keyboards.Pagination.filter(F.action=="choise"))
async def choise_type(call: CallbackQuery, callback_data:keyboards.Pagination, state: FSMContext):
    types_spend = bd.get_types(call.from_user.id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:")
    for index, a in enumerate(types_spend):
        await call.message.answer(f"{index + 1} - {a[1]}")
    await state.set_state(Bebra.choise_type)



@router.callback_query(keyboards.Pagination.filter(F.action=="create"))
async def create_type(call: CallbackQuery, callback_data:keyboards.Pagination, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:")
    await state.set_state(Bebra.set_type)



@router.callback_query(keyboards.DelSpend.filter(F.action=="type"))
async def choise_type(call: CallbackQuery, callback_data:keyboards.DelSpend, state: FSMContext):
    types_spend = bd.get_types(call.from_user.id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:")
    for index, a in enumerate(types_spend):
        await call.message.answer(f"{index + 1} - {a[1]}")
    await state.set_state(DellBebra.dell_type)



@router.callback_query(keyboards.DelSpend.filter(F.action=="spend"))
async def choise_type(call: CallbackQuery, callback_data:keyboards.DelSpend, state: FSMContext):
    types_spend = bd.get_types(call.from_user.id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:")
    for index, a in enumerate(types_spend):
        await call.message.answer(f"{index + 1} - {a[1]}")
    await state.set_state(DellBebra.choise_spend)
